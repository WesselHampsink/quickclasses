class QuickFilter { constructor({ elementSelector: t = "[data-index]", filterCheckboxInputs: e, filterSelectInputs: s, filterTextInputs: i, filterRangeInputs: l, filterRadioInputs: a, filterStartTextInputs: n, resultNumberSelector: r = null, noResultMessage: h = null, showDisplayProperty: o = "block", hideDisplayProperty: c = "none", callBackFunction: u = null, modifySelectedFunction: d, itemsScope: p = null, keyupDebounce: g = 200 }) { var m, f; if (this._allShown = [], this.debounce = (t, e) => { let s; return () => { window.clearTimeout(s), s = window.setTimeout(t.bind(null), e) } }, this._elementSelector = t, this._showDisplayProperty = o, this._hideDisplayProperty = c, null === p ? this._itemsScope = document : document.querySelector(p) && (this._itemsScope = document.querySelector(p)), void 0 === this._itemsScope || (this._allResults = this._itemsScope.querySelectorAll(this._elementSelector), 0 === this._allResults.length)) return; this._noResult = document.querySelector(h), r && (this._counterElement = null !== (m = document.querySelector(r)) && void 0 !== m ? m : null), this._showCounter = this._allResults.length, this._allInputs = null !== (f = document.querySelectorAll("[data-filter]")) && void 0 !== f ? f : null, void 0 !== e && (this._filterCheckboxInputs = e), void 0 !== s && (this._filterSelectInputs = s), void 0 !== n && (this._filterStartTextInputs = n), void 0 !== i && (this._filterTextInputs = i), void 0 !== l && (this._filterRangeInputs = l), void 0 !== a && (this._filterRadioInputs = a), this._callBackFunction = u, void 0 !== a && (this._modifySelectedFunction = d), this._keyupDebounce = g, this.inputCallback = this.inputCallback.bind(this), this._allInputs.forEach(t => { t instanceof HTMLInputElement && ("text" === t.type || "search" === t.type) ? t.addEventListener("keyup", this.debounce(this.inputCallback, this._keyupDebounce)) : t.addEventListener("change", () => { this.inputCallback() }) }), this.getAllDataSets(), this.showAmountResults(), this.inputCallback() } getAllDataSets() { return this._allDataSets = [], this._allResults.forEach(t => { this._allDataSets.push(Object.assign({}, null == t ? void 0 : t.dataset)) }), this._allDataSets } showAll() { this._allResults.forEach(t => t.style.display = this._showDisplayProperty), this._showCounter = this._allResults.length } hideAll() { null != this._noResult && (this._noResult.style.display = this._hideDisplayProperty), this._allResults.forEach(t => t.style.display = this._hideDisplayProperty), this._showCounter = 0 } showNoResultMessage() { null !== this._noResult && (this._noResult.style.display = this._showDisplayProperty) } showThisItem(t) { let e = this._itemsScope.querySelector(`[data-index="${t}"]`); e instanceof HTMLElement && (e.style.display = this._showDisplayProperty, this._allShown.push(e)), this._showCounter++ } textStartsWithFilter(t, e) { let s = this._allFilters[t].toString().toLowerCase(); return !!e.toLowerCase().startsWith(s) } textFilter(t, e) { let s = this._allFilters[t].toString().toLowerCase(); return -1 !== e.toLowerCase().indexOf(s) } rangeFilter(t, e) { let s = parseFloat(this._allFilters[t][0]), i = parseFloat(this._allFilters[t][1]); if (e.indexOf(",") > -1) { let l = e.split(","), a = parseFloat(l[1]), n = parseFloat(l[0]); return a <= i && n >= s } return !!(parseFloat(e) >= s && parseFloat(e) <= i) } checkSelect(t, e) { let s = this._allFilters[t]; return -1 !== e.indexOf(",") && Array.isArray(s) ? s.some(t => -1 !== e.split(",").indexOf(t)) : s[0] === e } checkFilter(t, e) { if (!e || "" === e) return !1; let s = this._allFilters[t].toString().toLowerCase().split(","), i = e.toLowerCase(); return s.some(t => -1 !== i.indexOf(t)) } radioFilter(t, e) { if (-1 !== e.indexOf(",")) { let s = e.split(","); return s.some(e => e === this._allFilters[t][0]) } return this._allFilters[t][0] === e } filterFunction() { this._allShown = [], this.hideAll(), this._allDataSets.forEach(t => { let e = {}; for (let s of Object.keys(this._allFilters)) e[s] = !0; for (let i of Object.keys(this._allFilters)) if (null !== this._allFilters[i]) { if (this._filterCheckboxInputs instanceof Array && -1 !== this._filterCheckboxInputs.indexOf(i)) e[i] = this.checkFilter(i, t[i]); else if (this._filterSelectInputs instanceof Array && -1 !== this._filterSelectInputs.indexOf(i)) e[i] = this.checkSelect(i, t[i]); else if (this._filterStartTextInputs instanceof Array && -1 !== this._filterStartTextInputs.indexOf(i)) e[i] = this.textStartsWithFilter(i, t[i]); else if (this._filterTextInputs instanceof Array && -1 !== this._filterTextInputs.indexOf(i)) e[i] = this.textFilter(i, t[i]); else if (this._filterRadioInputs instanceof Array && -1 !== this._filterRadioInputs.indexOf(i)) e[i] = this.radioFilter(i, t[i]); else if (this._filterRangeInputs instanceof Array && -1 !== this._filterRangeInputs.indexOf(i)) { if (this._allFilters[i][0] == this._allFilters[i][2] && this._allFilters[i][1] == this._allFilters[i][3]) continue; e[i] = this.rangeFilter(i, t[i]) } } Object.keys(e).every(t => e[t]) && this.showThisItem(t.index) }) } showAmountResults() { if (null !== this._counterElement) return this._counterElement.textContent = `${this._showCounter}`, this._showCounter } checkIfAllEmpty() { let t = Object.keys(this._allFilters).every(t => null === this._allFilters[t] || "" === this._allFilters[t][0]); return !!t && (this.showAll(), !0) } getAllSelectedFilters() { this._allFilters = {}, this._allInputs.forEach(t => { var e; this._allFilters[null === (e = null == t ? void 0 : t.dataset) || void 0 === e ? void 0 : e.filter] = null }) } inputCallback() { var t; this.getAllSelectedFilters(), null === (t = this._allInputs) || void 0 === t || t.forEach(t => { var e, s; if (void 0 == t.value || null == t.value || "" == t.value || t instanceof HTMLInputElement && "checkbox" === t.type && !t.checked) return; let i = t.dataset.filter; if (null === this._allFilters[i] && (this._allFilters[i] = []), ("radio" === t.type || "RADIO" === t.type) && (null === (e = this._filterRadioInputs) || void 0 === e ? void 0 : e.indexOf(t.dataset.filter)) !== -1) t instanceof HTMLInputElement && !0 === t.checked && this._allFilters[i].push(t.value); else if ((null == t ? void 0 : t.multiple) && ("select" === t.tagName || "SELECT" === t.tagName)) { let l = Array.from(t.querySelectorAll("option:checked")).map(t => t.value); this._allFilters[i].push(...l) } else if (t instanceof HTMLInputElement && t.multiple && ("range" === t.type || "RANGE" === t.type)) { if (t.classList.contains("ghost")) return; this._allFilters[i].push(...t.value.split(",")), this._allFilters[i].push(t.min), this._allFilters[i].push(t.max) } else this._allFilters[i].push(t.value); (null === (s = this._filterRadioInputs) || void 0 === s ? void 0 : s.indexOf(t.dataset.filter)) !== -1 && 0 == this._allFilters[i].length && (this._allFilters[i] = null) }), void 0 !== this._modifySelectedFunction && (this._allFilters = this._modifySelectedFunction(this._allFilters)), this.filterFunction(), 0 !== this._showCounter || this.checkIfAllEmpty() || this.showNoResultMessage(), this.showAmountResults(), void 0 !== this._callBackFunction && this._callBackFunction(this) } } class QuickSorting { constructor({ elementsSelector: t = "[data-index]", sortSelectSelector: e = 'select[name="sort"]', parentElement: s = null, callBackFunction: i }) { var l, a; if (this._elements = document.querySelectorAll(t), null === this._elements || (this._sortSelect = document.querySelector(e), null === this._sortSelect)) return; this._parentElement = document.querySelector(s), null === this._parentElement && (this._parentElement, this._elements[0].parentElement), this._callBackFunction = i, this.appendEvent(), this._selectedValue = { key: this._sortSelect.options[this._sortSelect.selectedIndex].dataset.key, order: null === (l = this._sortSelect.options[this._sortSelect.selectedIndex].dataset) || void 0 === l ? void 0 : l.order, type: null === (a = this._sortSelect.options[this._sortSelect.selectedIndex].dataset) || void 0 === a ? void 0 : a.type } } init() { this.getSelectedValue(), this._parentElement.innerHTML = "", this.sort().forEach(t => { this._parentElement.appendChild(t) }), null !== this._callBackFunction && this._callBackFunction() } appendEvent() { this._sortSelect.addEventListener("change", () => { this.init() }) } getSelectedValue() { var t, e; return this._selectedValue = { key: this._sortSelect.options[this._sortSelect.selectedIndex].dataset.key, order: null === (t = this._sortSelect.options[this._sortSelect.selectedIndex].dataset) || void 0 === t ? void 0 : t.order, type: null === (e = this._sortSelect.options[this._sortSelect.selectedIndex].dataset) || void 0 === e ? void 0 : e.type } } sort() { let t = this._selectedValue.key, e = this._selectedValue.order, s = this._selectedValue.type; return [...this._elements].sort((i, l) => "random" === t ? .5 - Math.random() : "CHAR" === s ? "ASC" === e ? i.dataset[t].localeCompare(l.dataset[t]) : l.dataset[t].localeCompare(i.dataset[t]) : "NUM" === s ? "ASC" === e ? parseFloat(i.dataset[t]) - parseFloat(l.dataset[t]) : parseFloat(l.dataset[t]) - parseFloat(i.dataset[t]) : void 0) } } class QuickPagination { constructor({ pagesTarget: t, itemsPerPage: e = 5, itemsSelector: s = "[data-index]", paginationSelector: i = "#pagination", pageDisplayProperty: l = "block", nextPrevButtons: a = !1, contentPrevButton: n = "Previous", contentNextButton: r = "Next", pageClasses: h = ["page", "row"], amountOfPrevNextItems: o = 1 }) { this._chunks = [], this._chunks = [], this._perPage = e, this._itemsSelector = s, this._pagesTarget = document.querySelector(t), this._paginationElement = document.querySelector(i), this._nextPrevButtons = a, this._pageDisplay = l, this._currentPage = 1, this._amountOfPages = 0, this._amountOfPrevNextItems = o, this._originalItems = Array.prototype.slice.call(document.querySelectorAll(this._itemsSelector)), this._contentPrevButton = n, this._contentNextButton = r, this._pageClasses = h, document.querySelector(this._itemsSelector).parentElement.style.display = "none", this.init() } init() { this._currentPage = 1, this.getItems(), this.createChunks(), this.appendPages(), this.createPagination(), this.addClickEvents() } createPagination() { return this.createPageNav(), this._nextPrevButtons && this.createNextPrev(), !0 } getOriginalItems() { return this._originalItems = Array.prototype.slice.call(document.querySelectorAll(this._itemsSelector)) } getItems() { return this._visItems = this.getOriginalItems().filter(t => "none" != t.style.display), this._visItems } createChunks() { this._chunks = []; let t = 0, e = this._visItems.length; for (; t <= e;) { let s = this._visItems.slice(t, t += this._perPage); this._chunks.push(s) } return 0 === this._chunks[this._chunks.length - 1].length && this._chunks.pop(), this._amountOfPages = this._chunks.length, this._chunks } createAnchorTag(t, e) { let s = document.createElement("a"); return s.classList.add("page-link"), s.setAttribute("href", `#page-${t}`), s.setAttribute("aria-label", `Page${t}`), s.setAttribute("data-page-number", t), e && s.setAttribute("data-page-anchor-tag", t), s.textContent = `${t}`, s } createListItem(t, e) { let s = document.createElement("li"); return s.classList.add("page-item"), s.appendChild(this.createAnchorTag(t, e)), s } createEmptyListItem() { let t = document.createElement("a"); t.classList.add("page-link"), t.setAttribute("aria-disabled", "true"), t.setAttribute("href", "#"), t.textContent = "..."; let e = document.createElement("li"); return e.classList.add("empty-page-link"), e.classList.add("disabled"), e.classList.add("page-item"), e.appendChild(t), e } createPageNav() { this._paginationElement.innerHTML = ""; let t = document.createElement("ol"); t.classList.add("pagination"), t.classList.add("flex-wrap"); for (let e = 0; e < this._chunks.length; e++)t.appendChild(this.createListItem(`${e + 1}`, !0)); return this._paginationElement.appendChild(t), t } createPage(t) { let e = document.createElement("div"); for (let s = 0; s < this._pageClasses.length; s++)e.classList.add(this._pageClasses[s]); return e.id = "page-" + (t + 1), e.dataset.page = `${t + 1}`, e.style.display = "none", this._chunks[t].forEach(t => { e.appendChild(t.cloneNode(!0)) }), e } appendPages() { this._pagesTarget.querySelectorAll("[data-page]").forEach(t => { t.remove() }); for (let t = 0; t < this._chunks.length; t++)this._pagesTarget.appendChild(this.createPage(t)); return this._pagesTarget } hideAllPages() { this._pagesTarget.querySelectorAll("[data-page]").forEach(t => { t.style.display = "none" }) } removeActiveLinks() { this._paginationElement.querySelectorAll("[data-page-anchor-tag]").forEach(t => { t.parentElement.classList.remove("active") }) } showPage(t, e) { if (!t.getAttribute("aria-disabled")) { if (this.hideAllPages(), this.removeActiveLinks(), "pagination-next-button" !== t.parentElement.id && "pagination-prev-button" !== t.parentElement.id) { t.parentElement.classList.add("active"); let s = this._pagesTarget.querySelector('[data-page="' + t.dataset.pageAnchorTag + '"]'); s.style.display = this._pageDisplay, this._currentPage = parseInt(t.dataset.pageAnchorTag) } else { this._paginationElement.querySelector('[data-page-anchor-tag="' + e + '"]').parentElement.classList.add("active"); let i = this._pagesTarget.querySelector('[data-page="' + e + '"]'); i.style.display = this._pageDisplay, this._currentPage = e } this.replaceNumbersWithDots(), this.checkCanClickNextPrev() } } addClickEvents() { this._paginationElement.querySelectorAll("a").forEach(t => { parseInt(t.dataset.pageAnchorTag) === this._currentPage && this.showPage(t, this._currentPage), t.addEventListener("click", e => { e.preventDefault(), !t.dataset.pageAnchorTag && this._nextPrevButtons ? this.showPage(t, this._currentPage + parseInt(t.dataset.pageNumber)) : this.showPage(t, this._currentPage) }) }) } setContentAndIdForListItem(t, e) { return t.id = "pagination-" + e + "-button", "next" === e && (t.children[0].innerHTML = this._contentNextButton), "prev" === e && (t.children[0].innerHTML = this._contentPrevButton), t } enableListItem() { if (!1 === this._nextPrevButtons) return; let t = this._paginationElement.children[0].firstElementChild, e = this._paginationElement.children[0].lastElementChild; t.classList.remove("disabled"), e.classList.remove("disabled"), t.children[0].removeAttribute("aria-disabled"), e.children[0].removeAttribute("aria-disabled") } disableListItem(t) { return t.children[0].setAttribute("aria-disabled", "true"), t.classList.add("disabled"), t } canClickNextPrev(t) { return !(t < 1) && !(t > this._amountOfPages) } checkCanClickNextPrev() { !1 === this._nextPrevButtons || (this.enableListItem(), this.canClickNextPrev(this._currentPage - 1) || this.disableListItem(this._prevButton), this.canClickNextPrev(this._currentPage + 1) || this.disableListItem(this._nextButton)) } createNextPrev() { this._prevButton = this.setContentAndIdForListItem(this.createListItem("-1", !1), "prev"), this._nextButton = this.setContentAndIdForListItem(this.createListItem("+1", !1), "next"), this._paginationElement.children[0].prepend(this._prevButton), this._paginationElement.children[0].append(this._nextButton) } calculateInReach(t) { return t === this._chunks.length || 1 === t || (t - (this._currentPage - this._amountOfPrevNextItems)) * (t - (this._currentPage + this._amountOfPrevNextItems)) <= 0 } showAllPaginationElements() { this._paginationElement.children[0].childNodes.forEach(t => { t instanceof HTMLElement && (t.style.display = "list-item") }) } removeAllDotElements() { this._paginationElement.querySelectorAll(".empty-page-link").forEach(t => { t.remove() }) } replaceElementsWithDots(t, e) { if (t.length > 0) { this._paginationElement.children[0].insertBefore(this.createEmptyListItem(), t[0].parentNode); for (let s = 0; s < t.length; s++)t[s].parentNode.style.display = "none" } if (e.length > 0) { this._paginationElement.children[0].insertBefore(this.createEmptyListItem(), e[e.length - 1].parentNode); for (let i = 0; i < e.length; i++)e[i].parentNode.style.display = "none" } } replaceNumbersWithDots() { let t = [], e = []; this._paginationElement.querySelectorAll("[data-page-anchor-tag]").forEach(s => { let i = parseInt(s.dataset.pageAnchorTag); this.calculateInReach(i) || (i < this._currentPage ? t.push(s) : e.push(s)) }), this.removeAllDotElements(), this.showAllPaginationElements(), (t.length > 0 || e.length > 0) && this.replaceElementsWithDots(t, e) } } class QuickFilterCounter { constructor({ enableOnInputs: e = !0, enableOnSelects: t = !0, counterClass: l = "counter", removeCounterFromSelected: s = !0 }) { this._enableOnInputs = e, this._enableOnSelects = t, this._counterClass = l, this._removeCounterFromSelected = s } init(e) { this._QuickFilterClass = e, this._allInputs = this._QuickFilterClass._allInputs, this._allResults = this._QuickFilterClass._allResults, this._allInputs.forEach(e => { if (this._enableOnInputs && e instanceof HTMLInputElement && ("checkbox" === e.type || "radio" === e.type) && this.createCounterElement(this.getLabelByElement(e), this.resultsWhenChecked(e)), e instanceof HTMLInputElement && e.checked && this._removeCounterFromSelected && this.removeOldCounter(this.getLabelByElement(e)), this._enableOnSelects && e instanceof HTMLSelectElement) for (let t of e.options) this.createCountElementOption(t, this.resultsWhenCheckedSelect(e, t)); e instanceof HTMLInputElement && e.checked && this._removeCounterFromSelected && this.removeOldCounter(this.getLabelByElement(e)) }) } resultsWhenCheckedSelect(e, t) { var l; this._oldFilters = JSON.parse(JSON.stringify(this._QuickFilterClass._allFilters)); let s = null === (l = e.dataset) || void 0 === l ? void 0 : l.filter, i = "" == t.value ? null : t.value, r = 0; return null === this._QuickFilterClass._allFilters[s] && null !== i ? this._QuickFilterClass._allFilters[s] = [i] : null === i ? this._QuickFilterClass._allFilters[s] = null : this._QuickFilterClass._allFilters[s] = [i], this._QuickFilterClass.filterFunction(), r = this._QuickFilterClass._showCounter, this._QuickFilterClass._allFilters = this._oldFilters, r } resultsWhenChecked(e) { var t; this._oldFilters = JSON.parse(JSON.stringify(this._QuickFilterClass._allFilters)); let l = null === (t = e.dataset) || void 0 === t ? void 0 : t.filter, s = "" == e.value ? null : e.value, i = 0; return (null === this._QuickFilterClass._allFilters[l] || (null == e ? void 0 : e.type) === "radio") && null !== s ? this._QuickFilterClass._allFilters[l] = [s] : null === s ? this._QuickFilterClass._allFilters[l] = null : this._QuickFilterClass._allFilters[l].push(s), this._QuickFilterClass.filterFunction(), i = this._QuickFilterClass._showCounter, this._QuickFilterClass._allFilters = this._oldFilters, i } getLabelByElement(e) { let t = null == e ? void 0 : e.id; if (t) return document.querySelector(`label[for="${t}"]`) } createCounterElementHTML(e) { let t = document.createElement("span"); return t.className = `${this._counterClass} _quick_counter`, t.textContent = `(${e})`, t } createCountElementOption(e, t) { this.removeOldCounter(e), e.append(this.createCounterElementHTML(t)) } createCounterElement(e, t) { this.removeOldCounter(e), e.append(this.createCounterElementHTML(t)) } removeOldCounter(e) { var t; null === (t = e.querySelector("._quick_counter")) || void 0 === t || t.remove() } }